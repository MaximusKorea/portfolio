<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="project.member.mapper.MemberMapper">
	
	<select id="readJoinResult" parameterType="pagebean.ListResultBeanReserve" resultType="domain.member.MemberJoinResult">
		<![CDATA[ 
		 	select * from
			    (select rownum idx, t.* from
			        (select r.r_no,r_theater,r_viewdate,r_time,r_price,r_persons,r_seat,r_age,
			            mv.mv_no,mv.mv_runtime,mv.mv_name,mv.mv_image
			            from reservation r
			            left outer join movie mv on r.mv_no = mv.mv_no
			            left outer join member m on r.m_no = m.m_no
			            where m.m_no=#{m_no}
			        ) t
			    )
			where idx>=#{startRowNum} and idx<=#{endRowNum}
		]]>
	</select>
	
	<select id="readByNoMember" parameterType="java.lang.Integer" resultType="domain.member.Member">
		SELECT *
	 	FROM MEMBER
	 	WHERE M_NO =#{M_NO}
	</select>
	
	<select id="readByIdMember" parameterType="java.lang.String" resultType="domain.member.Member">
		SELECT *
	 	FROM MEMBER
	 	WHERE M_ID =#{M_ID}
	</select>
	
	<select id="findIdMember" parameterType="domain.member.Member" resultType="java.lang.String">
		SELECT M_ID
		FROM MEMBER
		WHERE M_NAME =#{m_name} AND M_PHONE =#{m_phone} AND M_BIRTH =#{m_birth}
	</select>
	
	<select id="findPwMember" parameterType="domain.member.Member" resultType="java.lang.String">
		SELECT M_PASSWORD
		FROM MEMBER
		WHERE M_ID =#{m_id} AND M_NAME =#{m_name} AND M_PHONE =#{m_phone} AND M_BIRTH =#{m_birth}
	</select>
	 	
	 <select id="readAllMember" resultType="domain.member.Member">
	  	SELECT *
	  	FROM MEMBER
	 </select>
	 
	 <insert id="createMember" parameterType="domain.member.Member">
	 	<selectKey keyProperty="m_no" resultType="int" order="BEFORE">
			SELECT MEMBER_M_NO_SEQ.nextval FROM DUAL
	 	</selectKey>
	 	INSERT INTO MEMBER(M_NO,M_ID,M_PASSWORD,M_NAME,M_BIRTH,M_PHONE,M_ZIPCODE,M_ADDRESS1,M_ADDRESS2,M_EMAIL,M_POINT)
	 	VALUES
	 	(#{m_no},#{m_id},#{m_password},#{m_name},#{m_birth},#{m_phone},#{m_zipcode},#{m_address1},#{m_address2},#{m_email},#{m_point})
	 </insert>
	 
	 <insert id="createKakaoMember" parameterType="domain.member.Member">
	 	<selectKey keyProperty="m_no" resultType="int" order="BEFORE">
	 		SELECT MEMBER_M_NO_SEQ.nextval FROM DUAL
	 	</selectKey>
	 	INSERT INTO
	 	MEMBER(M_NO,M_ID,M_NAME,M_EMAIL,M_POINT)
	 	VALUES
	 	(#{m_no},#{m_id},#{m_name},#{m_email},#{m_point})
	</insert>
 		
 	 <delete id="deleteMember" parameterType="java.lang.Integer">
 	 	DELETE FROM MEMBER
 	 	WHERE M_NO =#{M_NO}
 	 </delete>
	 
	 <update id="updateMember" parameterType="domain.member.Member">
	 	UPDATE MEMBER
	 	SET 
	 	M_PASSWORD =#{m_password},
	 	M_NAME =#{m_name},
	 	M_BIRTH =#{m_birth},
	 	M_PHONE =#{m_phone},
	 	M_ZIPCODE =#{m_zipcode},
	 	M_ADDRESS1 =#{m_address1},
	 	M_ADDRESS2 =#{m_address2},
	 	M_EMAIL =#{m_email}
	 	WHERE M_NO =#{m_no}
	 </update>
	 
	 <update id="calcPointMember" parameterType="java.util.Map">
        UPDATE MEMBER
        SET
        M_POINT =#{m_point}
        WHERE M_NO =#{m_no}
     </update> 
 	
 	 <update id="updateMemberPass" parameterType="java.util.Map">
        UPDATE MEMBER
        SET
        M_PASSWORD =#{m_password}
        WHERE M_NO =#{m_no}
     </update> 
     
	 <update id="updatePointByManage" parameterType="java.util.Map">
        UPDATE POINT
        SET
        PT_POINT =#{pt_point}
        WHERE M_NO =#{m_no}
     </update> 
 	
 	<select resultType="java.lang.Integer" parameterType="java.lang.Integer" id="readCountSeeMvMember"> 
 		SELECT COUNT (*) 
 		FROM reservation
 	 	WHERE M_NO=#{m_no} 
 	 </select>
	 
	 <select id="readByManageMember" resultType="domain.member.MemberPointJoinResult">
		select  m.m_no, m.m_id, m.m_password, m.m_name, m.m_birth,m.m_phone,m.m_zipcode,m.m_address1,m.m_address2,m.m_email,p.pt_point
		from POINT p
		inner join member m on p.m_no = m.m_no 
    	where pt_date IN
        (
            select  MAX(pt_date)  
            from point
            group by m_no  
        )
	</select>
	 
</mapper>